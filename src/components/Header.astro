---
import { getRelativeLocaleUrl } from "astro:i18n";
import { translate, type Language } from "../i18n";
import LanguageToggle from "./LanguageToggle.astro";
import Chevron from "../logos/Chevron.astro";

interface Props {
    title?: string;
    navigation?: boolean;
    children?: any;
}

const keys = {
    en: {
        "": "Home",
        projects: "Projects",
        saum: "SAUM",
        trampolineintercite: "Trampoline Intercité",
        cribbage: "Cribbage",
        satisfactory: "Satisfactory solver",
        portfolio: "Portfolio",
    },
    fr: {
        "": "Accueil",
        projects: "Projets",
        saum: "SAUM",
        trampolineintercite: "Trampoline Intercité",
        cribbage: "Cribbage",
        satisfactory: "Résolveur Satisfactory",
        portfolio: "Portfolio",
    },
};

const t = translate(keys, Astro.currentLocale);

const { title = "", navigation = false } = Astro.props;
const route = Astro.url.pathname
    .replace(/\/$/, "")
    .split("/")
    .filter((section) => !Object.keys(keys).includes(section)) as Array<
    keyof (typeof keys)[Language]
>;
---

<header>
    {
        navigation && (
            <nav>
                {route.map((page, i) => (
                    <>
                        <span class:list={{ current: route.length === i + 1 }}>
                            <a
                                href={getRelativeLocaleUrl(
                                    Astro.currentLocale ?? "en",
                                    route.slice(0, i + 1).join("/"),
                                )}
                            >
                                {t(page)}
                            </a>
                        </span>
                        {i + 1 < route.length && (
                            <span class="chevron">
                                <Chevron />
                            </span>
                        )}
                    </>
                ))}
            </nav>
        )
    }

    <hgroup>
        {title.length > 0 && <h1>{title}</h1>}
        <slot />
        {title.length > 0 && <span class="title-separator">&middot;</span>}
    </hgroup>

    <div id="header-language" data-persist={navigation}>
        <LanguageToggle
            style={{ display: "block", width: "24px", height: "24px" }}
        />
    </div>
</header>

<style>
    header {
        width: 100%;
        position: relative;

        nav {
            display: flex;
            align-items: center;
            gap: 0.25em;
            font-size: 0.9em;
            padding-top: 0.15em;

            a,
            span {
                color: #7a7a7a;
            }

            span.current a {
                font-weight: 600;
                color: #303030;
            }

            .chevron {
                --size: 18px;
                width: var(--size);
                height: var(--size);
            }

            .chevron:last-of-type {
                --size: 24px;
            }
        }

        nav + hgroup {
            padding-top: 1em;
        }

        hgroup {
            display: flex;
            align-items: center;
            gap: 1em;

            h1 {
                order: -2;
                font-weight: 700;
                font-size: 1.75em;
                margin: 0;
            }

            .title-separator {
                order: -1;
                display: none;
                font-weight: 400;
                font-size: 2em;
            }
        }

        > * {
            pointer-events: all;
        }

        #header-language {
            position: fixed;
            top: 1.5em;
            right: 1.5em;
            opacity: 0.7;
        }
    }

    @media (min-width: 50rem) {
        header {
            #header-language:not([data-persist="true"]) {
                display: none;
            }

            hgroup > *:not(h1) + .title-separator {
                display: block;
            }
        }
    }
</style>
